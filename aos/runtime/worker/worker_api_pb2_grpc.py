# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from aos.runtime.worker import worker_api_pb2 as aos_dot_runtime_dot_worker_dot_worker__api__pb2


class WorkerApiStub(object):
    """APIs for CLI and Web
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InjectMessage = channel.unary_unary(
                '/WorkerApi/InjectMessage',
                request_serializer=aos_dot_runtime_dot_worker_dot_worker__api__pb2.InjectMessageRequest.SerializeToString,
                response_deserializer=aos_dot_runtime_dot_worker_dot_worker__api__pb2.InjectMessageResponse.FromString,
                )
        self.RunQuery = channel.unary_unary(
                '/WorkerApi/RunQuery',
                request_serializer=aos_dot_runtime_dot_worker_dot_worker__api__pb2.RunQueryRequest.SerializeToString,
                response_deserializer=aos_dot_runtime_dot_worker_dot_worker__api__pb2.RunQueryResponse.FromString,
                )


class WorkerApiServicer(object):
    """APIs for CLI and Web
    """

    def InjectMessage(self, request, context):
        """Sends a message to the recipient actor, the sender is the root actor, which represents the agent.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunQuery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WorkerApiServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InjectMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.InjectMessage,
                    request_deserializer=aos_dot_runtime_dot_worker_dot_worker__api__pb2.InjectMessageRequest.FromString,
                    response_serializer=aos_dot_runtime_dot_worker_dot_worker__api__pb2.InjectMessageResponse.SerializeToString,
            ),
            'RunQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.RunQuery,
                    request_deserializer=aos_dot_runtime_dot_worker_dot_worker__api__pb2.RunQueryRequest.FromString,
                    response_serializer=aos_dot_runtime_dot_worker_dot_worker__api__pb2.RunQueryResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'WorkerApi', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WorkerApi(object):
    """APIs for CLI and Web
    """

    @staticmethod
    def InjectMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WorkerApi/InjectMessage',
            aos_dot_runtime_dot_worker_dot_worker__api__pb2.InjectMessageRequest.SerializeToString,
            aos_dot_runtime_dot_worker_dot_worker__api__pb2.InjectMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WorkerApi/RunQuery',
            aos_dot_runtime_dot_worker_dot_worker__api__pb2.RunQueryRequest.SerializeToString,
            aos_dot_runtime_dot_worker_dot_worker__api__pb2.RunQueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
