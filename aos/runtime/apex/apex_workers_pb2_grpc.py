# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from aos.runtime.apex import apex_workers_pb2 as aos_dot_runtime_dot_apex_dot_apex__workers__pb2


class ApexWorkersStub(object):
    """Internal service for worker nodes to communicate with the Apex node
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterWorker = channel.unary_unary(
                '/ApexWorkers/RegisterWorker',
                request_serializer=aos_dot_runtime_dot_apex_dot_apex__workers__pb2.WorkerRegistrationRequest.SerializeToString,
                response_deserializer=aos_dot_runtime_dot_apex_dot_apex__workers__pb2.WorkerRegistrationResponse.FromString,
                )
        self.WorkerStream = channel.stream_stream(
                '/ApexWorkers/WorkerStream',
                request_serializer=aos_dot_runtime_dot_apex_dot_apex__workers__pb2.WorkerToApex.SerializeToString,
                response_deserializer=aos_dot_runtime_dot_apex_dot_apex__workers__pb2.ApexToWorker.FromString,
                )


class ApexWorkersServicer(object):
    """Internal service for worker nodes to communicate with the Apex node
    """

    def RegisterWorker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WorkerStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApexWorkersServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterWorker': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterWorker,
                    request_deserializer=aos_dot_runtime_dot_apex_dot_apex__workers__pb2.WorkerRegistrationRequest.FromString,
                    response_serializer=aos_dot_runtime_dot_apex_dot_apex__workers__pb2.WorkerRegistrationResponse.SerializeToString,
            ),
            'WorkerStream': grpc.stream_stream_rpc_method_handler(
                    servicer.WorkerStream,
                    request_deserializer=aos_dot_runtime_dot_apex_dot_apex__workers__pb2.WorkerToApex.FromString,
                    response_serializer=aos_dot_runtime_dot_apex_dot_apex__workers__pb2.ApexToWorker.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ApexWorkers', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ApexWorkers(object):
    """Internal service for worker nodes to communicate with the Apex node
    """

    @staticmethod
    def RegisterWorker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ApexWorkers/RegisterWorker',
            aos_dot_runtime_dot_apex_dot_apex__workers__pb2.WorkerRegistrationRequest.SerializeToString,
            aos_dot_runtime_dot_apex_dot_apex__workers__pb2.WorkerRegistrationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WorkerStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/ApexWorkers/WorkerStream',
            aos_dot_runtime_dot_apex_dot_apex__workers__pb2.WorkerToApex.SerializeToString,
            aos_dot_runtime_dot_apex_dot_apex__workers__pb2.ApexToWorker.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
