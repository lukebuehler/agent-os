syntax = "proto3";
//import "google/protobuf/empty.proto";
//import "aos/runtime/apex/test.proto";

// Internal service for worker nodes to communicate with the Apex node
service ApexWorkers {
  // Registers a worker to get ready for a streaming connection.
  rpc RegisterWorker(WorkerRegistrationRequest) returns (WorkerRegistrationResponse) {}
  // Connects a long running worker to the apex node via two-way streaming. Worker needs to register first.
  rpc ConnectWorker(stream WorkerToApexMessage) returns (stream ApexToWorkerMessage) {}
}


message WorkerRegistrationRequest {
  string worker_id = 1;
  WorkerManifest manifest = 2;
}

message WorkerRegistrationResponse {
  string ticket = 1; //used to connect to the stream
}

message WorkerManifest{
  string worker_id = 1;
  map<string, string> capabilities = 2; //key, value
  repeated Actor current_actors = 4;
}

// message Agent{
//   bytes agent_id = 1; //32 bytes, of actor_id type
//   string agent_did = 2;

//   string grit_address = 3; //how to connect to grit of this agent
// }

message Actor{
  bytes agent_id = 1; //32 bytes, of actor_id type
  bytes actor_id = 2; //32 bytes, actor_id
  string grit_address = 3; //how to connect to the assigned grit of the agent of this actor
}

message ActorMessage{
  bytes agent_id = 1; //32 bytes, of actor_id type
  bytes sender_id = 2; //32 bytes, actor_id
  bytes recipient_id = 3; //32 bytes, actor_id
  bytes message_id = 4; //32 bytes, object_id
}

message ActorQuery{
  bytes agent_id = 1; //32 bytes, of actor_id type
  bytes actor_id = 2; //32 bytes, actor_id
  string query_id = 3; //correlation_id for this query
  string query_name = 4;
  optional bytes context = 5; //
}

message ActorQueryResult{
  bytes agent_id = 1; //32 bytes, of actor_id type
  bytes actor_id = 2; //32 bytes, actor_id
  string query_id = 3; //correlation_id for this query, must match the ActorQuery
  oneof result { //can be a tree_id, or the actual blob data
    //blob_id or tree_id (see Grit Message)
    bytes tree_id = 10;
    //valid Grit blob object  
    bytes blob = 11; 
  }
}


message ApexToWorkerMessage {
  enum MessageType {
    PING = 0;
    GIVE_ACTOR = 12; // give to worker
    YANK_ACTOR = 13; // take from worker
    ACTOR_MESSAGE = 10; //the recipient is on the worker
    ACTOR_QUERIE = 11;  //the recipient is on the worker
  }

  //always required
  MessageType type = 1;

  oneof payload {
    ActorMessage message = 10;
    ActorQuery query = 11;
    Actor actor = 12;
  }
}

message WorkerToApexMessage {
  enum MessageType {
    PING = 0;
    READY = 1; // start receiving messages from apex
    ACTOR_MESSAGE = 10; //the recipient is not on the worker and the message needs to be routed by apex
    ACTOR_QUERIE = 11;  //the recipient is not on the worker and the query needs to be routed by apex
  }

  //always required
  MessageType type = 1;
  string worker_id = 2;
  string ticket = 3;

  oneof payload {
    ActorMessage message = 10;
    ActorQuery query = 11;
  }
}